package ru.usernamedrew;

import ru.usernamedrew.ui.MainFrame;
import javax.swing.*;

/**
 * Главный класс приложения для построения фрактальных узоров с помощью L-систем.
 *
 * <p><b>L-система (Lindenmayer System)</b> - это формальная грамматика, используемая для
 * моделирования процессов роста растений и построения фрактальных узоров.</p>
 *
 * <p><b>Принцип работы:</b></p>
 * <ol>
 *   <li><b>Аксиома</b> - начальная строка символов</li>
 *   <li><b>Правила подстановки</b> - определяют как заменять каждый символ</li>
 *   <li><b>Итерации</b> - многократное применение правил для создания сложных структур</li>
 *   <li><b>Интерпретация</b> - преобразование строки в графические команды</li>
 * </ol>
 *
 * <p><b>Пример работы для снежинки Коха:</b></p>
 *
 * <p><b>Шаг 1: Выбор фрактала</b><br>
 * Пользователь выбирает "Снежинка Коха" → программа читает koch.txt</p>
 *
 * <p><b>Шаг 2: Генерация строки</b><br>
 * Исходно: "F"<br>
 * Правило: F → F-F++F-F<br>
 * 1 итерация: "F-F++F-F"<br>
 * 2 итерация: "F-F++F-F - F-F++F-F ++ F-F++F-F - F-F++F-F"<br>
 * ...</p>
 *
 * <p><b>Шаг 3: "Черепашья графика"</b><br>
 * Программа проходит по каждому символу:<br>
 * • F → рисует линию вперед<br>
 * • - → поворачивает направо на 60°<br>
 * • + → поворачивает налево на 60°<br>
 * • [ → сохраняет текущее положение (начало ветки)<br>
 * • ] → восстанавливает положение (конец ветки)</p>
 *
 * <p><b>Шаг 4: Отрисовка</b><br>
 * Все точки соединяются линиями и автоматически масштабируются под размер окна.</p>
 *
 * <p><b>Поддерживаемые фракталы:</b></p>
 * <ul>
 *   <li>Снежинка Коха</li>
 *   <li>Кривая дракона</li>
 *   <li>Деревья (с ветвлением)</li>
 *   <li>Квадратный остров Коха</li>
 * </ul>
 *
 * @author usernamedrew
 * @version 1.0
 * @see ru.usernamedrew.ui.MainFrame
 * @see ru.usernamedrew.lsystem.LSystem
 * @see ru.usernamedrew.lsystem.LSystemParser
 */
public class App {

    /**
     * Точка входа в приложение. Создает и отображает главное окно.
     *
     * <p><b>Особенности реализации:</b></p>
     * <ul>
     *   <li>Использует SwingUtilities.invokeLater() для потокобезопасности</li>
     *   <li>Автоматически создает тестовые файлы фракталов</li>
     *   <li>Загружает снежинку Коха по умолчанию</li>
     * </ul>
     *
     * @param args аргументы командной строки (не используются)
     *
     * @see SwingUtilities#invokeLater(Runnable)
     * @see MainFrame
     */
    public static void main(String[] args) {
        // Запуск в Event Dispatch Thread для корректной работы Swing
        SwingUtilities.invokeLater(() -> {
            // Создание главного окна приложения
            MainFrame frame = new MainFrame();

            // Делаем окно видимым
            frame.setVisible(true);
        });
    }
}